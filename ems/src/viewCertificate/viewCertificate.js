import React, { useRef, useState, useEffect } from 'react';
import styled from 'styled-components';
import axios from 'axios';
import Cookies from 'js-cookie';
import { useParams } from 'react-router-dom';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

import { SweetAlert } from '../components/SweetAlert';

const MainContainer = styled.div`
    overflow: hidden;
`;

const A4SheetContainer = styled.div`
display:flex;
  position: fixed;
  min-height: 600px;
  min-width: 900px;
  border: 1px dashed black;
  margin-top: 5vh;
  margin-bottom: 5vh;
`;

const A4Sheet = styled.div`
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    min-height: 600px;
    min-width: 900px;
    position: relative;
    background-color: #ffffff;
    background-image: url(${props => props.background});
    background-size: cover;
    background-repeat: no-repeat;
    background-position: center;
`;

const ComponentArea = styled.div`
    display: flex;
    flex-direction: column;
    height: 89vh;
    width: 25vw;
    border: 1px solid black;
    margin-top: 5vh;
    margin-bottom: 5vh;
    align-items: center;
    text-align: center;
    float: right;
    margin-right: 5vw;
`;

const BackGround = styled.button`
    display: flex;
    border: 1px solid black;
    border-radius: 5px;
    background-color: #efefef;
    margin: 1em;
    font-size: 0.9em;
    font-weight: bold;
    height: 2em;
    cursor: pointer;
`;

const ViewCertificate = () => {

  const API_URL = process.env.REACT_APP_API_URL;

  const { id } = useParams();

  const [background, setBackground] = useState(null);
  const [xCoordinate, setxCoordinate] = useState(0);
  const [yCoordinate, setyCoordinate] = useState(0);
  const [name, setName] = useState("");
  const [fontFamily, setFontFamily] = useState('Arial');
  const [fontSize, setFontSize] = useState('24');
  const [fontColor, setFontColor] = useState('#000000');
  const [qrValue, setQrValue] = useState("");

  const certificateRef = useRef();

    const handleDownloadClick = () => {
        const input = certificateRef.current;
        html2canvas(input, {useCORS: true}).then((canvas) => {
            const imgData = canvas.toDataURL('image/png');
            const pdf = new jsPDF('p', 'mm', 'a4', true);
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const imgWidth = canvas.width;
            const imgHeight = canvas.height;
            const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);
            const imgX = (pdfWidth - imgWidth * ratio) / 2;
            const imgY = 30;
            pdf.addImage(imgData, 'PNG', imgX, imgY, imgWidth * ratio, imgHeight * ratio);
            pdf.save('certificate.pdf');
        });
    };

  useEffect(() => {
    const authToken = Cookies.get("authToken");

    if (!authToken) {
        window.location.href = "/login";
    }
    
    const onLoad = async () => {
        try {
            const response = await axios.get(`${API_URL}/certificate/user/${id}`,
                {
                    headers: {
                        Authorization: `Bearer ${authToken}`,
                        'Bypass-Tunnel-Reminder': 'eventaz',
                    },
                });
            setQrValue(response.data.qrContent);
            setBackground(response.data.backgroundImageUrl);
            setFontFamily(response.data.fontFamily);
            setFontSize(response.data.fontSize);
            setFontColor(response.data.fontColor);
            setxCoordinate(response.data.xCoordinate);
            setyCoordinate(response.data.yCoordinate);
            setName(response.data.name);
        }
        catch (error) {
          console.log(error)
            if (error.response.status === 403) {
                await SweetAlert({
                    title: "Error",
                    children: "Login and try again",
                    icon: "error",
                })

                window.location.href = "/login";
            }
            else if (!error.response.data.isCertificateAvailable) {
                await SweetAlert({
                    title: "Error",
                    children: "Certificate Has Not Yet been Generated By The Organizer, Kindly Try Again Later",
                    icon: "error",
                });

                window.location.href = `/event/${id}`
            }
        }
    };

    document.title = "Certificate || Haxguz";

    onLoad();
}, [API_URL, id]);

  return (
    <MainContainer>

      <A4SheetContainer>
        <A4Sheet background={background} ref={certificateRef}>
          <div style={{ position: 'absolute', top: yCoordinate-50, left: xCoordinate-50 }}>
            <div style={{ fontFamily: fontFamily, fontSize: fontSize + 'px', color: fontColor }}>
              {name}
            </div>
          </div>
        </A4Sheet>
      </A4SheetContainer>

      <ComponentArea>
        <button onClick={handleDownloadClick}>Generate PDF</button>
      </ComponentArea>

    </MainContainer>
  );
};

export default ViewCertificate;
